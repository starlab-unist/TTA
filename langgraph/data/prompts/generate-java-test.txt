Analyze the following Java source code and its transformed version to generate a JUnit-based test case that checks if both codes produce the same output for the same inputs.
The test case should use assertEquals to compare outputs.
There are test cases based on Python unittest in the input. Use the input used in test cases.
The generated test code will be combined with the source and transformed code in the format:

{{source_code}}
{{transformed_code}}
{{test_cases}}


- The source code defines a function original_function.
- The transformed code defines a function transformed_function.
- The test case should call both functions with the same inputs and compare their outputs using assertEquals.
- Utilize the test inputs written in Python.
- The test case should be based on Java JUnit.

Below is an example. Look carefully at the test cases and generate it out in the same format.

```java

import java.util.*;
import java.util.regex.*;
import java.util.stream.Stream;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.jupiter.params.provider.Arguments;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class equiv_test_0 {

    // Source Code
    static class SourceCode {
        public static String mostCommonWord(String text) {
            if (text == null) return null;
            String lower = text.toLowerCase();
            Matcher m = Pattern.compile("\\b\\w+\\b").matcher(lower);

            Map<String,Integer> counts = new HashMap<>();
            while (m.find()) {
                String w = m.group();
                counts.put(w, counts.getOrDefault(w, 0) + 1);
            }

            String mostCommon = null;
            int maxCount = 0;
            for (Map.Entry<String,Integer> e : counts.entrySet()) {
                if (e.getValue() > maxCount) {
                    maxCount = e.getValue();
                    mostCommon = e.getKey();
                }
            }
            return mostCommon;
        }
    }

    // Transformed Code
    static class TransformedCode {
        public static String getMostFrequentWord(String sentence) {
            if (sentence == null) return null;
            String lower = sentence.toLowerCase();
            Matcher m = Pattern.compile("\\w+").matcher(lower);

            Map<String,Integer> freq = new HashMap<>();
            while (m.find()) {
                String t = m.group();
                freq.put(t, freq.getOrDefault(t, 0) + 1);
            }

            String ans = null;
            int best = 0;
            for (Map.Entry<String,Integer> e : freq.entrySet()) {
                if (e.getValue() > best) {
                    best = e.getValue();
                    ans = e.getKey();
                }
            }
            return ans;
        }
    }

    // Test Cases
    private static final String[][] testCases = {
        {"Hello hello HeLLo"},
        {"Apple, banana. Apple! orange? apple; BANANA."},
        {"one two one two"},
        {"###@@!!python... python?? PYTHON--"},
        {"123 456 123 789 123"},
        {"abc abc 123 abc 123"},
        {"        "},
        {""},
        {"OpenAI"},
        {"a b c d e f g h i j"}
    };

    private static Stream<Arguments> provideTestCases() {
        return Arrays.stream(testCases).map(Arguments::of);
    }

    void mostCommonWord_vs_getMostFrequentWord(String inputText) {
        assertEquals(
            SourceCode.mostCommonWord(inputText),
            TransformedCode.getMostFrequentWord(inputText)
        );
    }
}


Now, Your Turn!
Source code:
```java
{source_code}
```

Transformed code:
```java
{transformed_code}
```

Test inputs:
```python
{test_cases}
```